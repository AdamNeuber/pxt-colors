{"entries":[{"timestamp":1741954559389,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n"],[-1,"type Color = {\n    h: number; // hue\n    s: number; // stauration\n    l: number; // lightness\n};\n\nconst blackcolor: Color = { h: 0, s: 0, l: 0 };\nconst colorArray: Array<Color> = [\n    { h: 0, s: 100, l: 50 },\n    { h: 120, s: 100, l: 50 },\n    { h: 240, s: 100, l: 50 },\n    { h: 60, s: 100, l: 50 }\n];\n\nconst strip: Array<Color> = [];\nstrip.length = 7;\n\nconst hasColor = [1, 3, 5, 7, 5, 3, 1];\n\nfor (let i = 0; i < strip.length; i++) {\n    const count = hasColor[i];\n    const place = (strip.length - count) / 2;\n    const color = colorArray[i % colorArray.length];[]\n\n    strip.fill(blackcolor);\n\n    for (let j = place; j < place + count; j++) {\n        strip[j] = color;\n    }\n\n    console.log(strip.map((c) => `{h:${c.h},s:${c.s},l:${c.l}}`).join(\" \"));\n}\n\n"]],"start1":0,"start2":0,"length1":764,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":278,"start2":278,"length1":11,"length2":42}]}]},{"timestamp":1741954808555,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n   "]],"start1":137,"start2":137,"length1":68,"length2":8}]}]},{"timestamp":1742154220893,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/*"],[0,"\ntyp"]],"start1":0,"start2":0,"length1":6,"length2":4}]}]},{"timestamp":1742154273216,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"/*"],[0,"\ntype Co"]],"start1":0,"start2":0,"length1":8,"length2":10},{"diffs":[[0,"er; // s"],[-1,"a"],[0,"t"],[1,"a"],[0,"uration\n"]],"start1":51,"start2":51,"length1":18,"length2":18},{"diffs":[[0,"};\n\n"],[-1,"\nfunction hslToRgb(h: number, s: number, l: number): [number, number, number] {\n    s /= 100;\n    l /= 100;\n    const k = (n: number) => (n + h / 30) % 12;\n    const a = s * Math.min(l, 1 - l);\n    const f = (n: number) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\n    return [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n}\n\n"],[0,"cons"]],"start1":97,"start2":97,"length1":384,"length2":8},{"diffs":[[0,"l: 50 },"],[-1,"    "],[0,"\n    { h"]],"start1":204,"start2":204,"length1":20,"length2":16},{"diffs":[[0,"l: 50 },"],[-1,"  "],[0,"\n    { h"]],"start1":235,"start2":235,"length1":18,"length2":16},{"diffs":[[0,"l: 50 },"],[-1," "],[0,"\n    { h"]],"start1":266,"start2":266,"length1":17,"length2":16},{"diffs":[[0," l: 50 }"],[-1,"    "],[0,"\n];\n\ncon"]],"start1":295,"start2":295,"length1":20,"length2":16},{"diffs":[[0,"\nconst strip"],[-1,"L"],[1,": Array<Color> = [];\nstrip.l"],[0,"ength = 7;\nc"]],"start1":307,"start2":307,"length1":25,"length2":52},{"diffs":[[0,"th = 7;\n"],[1,"\n"],[0,"const ha"]],"start1":350,"start2":350,"length1":16,"length2":17},{"diffs":[[0,"1];\n"],[-1,"const strip = neopixel.create(DigitalPin.P0, stripLength, NeoPixelMode.RGB);\n\n\n\nbasic.forever(function() {\n    "],[1,"\n"],[0,"for "]],"start1":395,"start2":395,"length1":119,"length2":9},{"diffs":[[0,"0; i < strip"],[-1,"L"],[1,".l"],[0,"ength; i++) "]],"start1":413,"start2":413,"length1":25,"length2":26},{"diffs":[[0," i++) {\n    "],[-1," "],[-1,"   "],[0,"const count "]],"start1":433,"start2":433,"length1":28,"length2":24},{"diffs":[[0,"lor[i];\n    "],[-1,"   "],[-1," "],[0,"const place "]],"start1":464,"start2":464,"length1":28,"length2":24},{"diffs":[[0,"trip"],[-1,"L"],[1,".l"],[0,"engt"]],"start1":492,"start2":492,"length1":9,"length2":10},{"diffs":[[0,"t) / 2;\n"],[-1,"    "],[0,"    cons"]],"start1":510,"start2":510,"length1":20,"length2":16},{"diffs":[[0,"th];"],[1,"[]"],[0,"\n\n"],[-1,"  "],[0,"    "],[-1,"  "],[0,"strip."],[-1,"clear();\n\n    "],[1,"fill(blackcolor);\n\n"],[0,"    "]],"start1":566,"start2":566,"length1":38,"length2":41},{"diffs":[[0,"    "],[-1,"  "],[-1,"  const [r, g, b] = hslToRgb(color.h, color.s, color.l);\n            strip.setPixelColor(j, neopixel.rgb(r, g, b));\n        }\n\n        strip.show();\n        basic.pause(300);\n    }\n})"],[1,"strip[j] = color;\n    }\n\n    console.log(strip.map((c) => `{h:${c.h},s:${c.s},l:${c.l}}`).join(\" \"));\n}\n\n"]],"start1":657,"start2":657,"length1":189,"length2":109}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":266,"start2":266,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1741954559388,"editorVersion":"7.0.57","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-colors\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742154220881,"editorVersion":"7.0.57","text":{"main.ts":"\ntype Color = {\n    h: number; // hue\n    s: number; // stauration\n    l: number; // lightness\n};\n\nconst blackcolor: Color = { h: 0, s: 0, l: 0 };\nconst colorArray: Array<Color> = [\n    { h: 0, s: 100, l: 50 },\n    { h: 120, s: 100, l: 50 },\n    { h: 240, s: 100, l: 50 },\n    { h: 60, s: 100, l: 50 }\n];\n\nconst strip: Array<Color> = [];\nstrip.length = 7;\n\nconst hasColor = [1, 3, 5, 7, 5, 3, 1];\n\nfor (let i = 0; i < strip.length; i++) {\n    const count = hasColor[i];\n    const place = (strip.length - count) / 2;\n    const color = colorArray[i % colorArray.length];[]\n\n    strip.fill(blackcolor);\n\n    for (let j = place; j < place + count; j++) {\n        strip[j] = color;\n    }\n\n    console.log(strip.map((c) => `{h:${c.h},s:${c.s},l:${c.l}}`).join(\" \"));\n}\n\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-colors\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1742154750488}